type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID! @isUnique
  name: String!
  secret: String! @isUnique
  size: Int!
  updatedAt: DateTime!
  url: String! @isUnique
}

type User implements Node {
  createdAt: DateTime!
  fbkAgeMin: Int
  fbkAgeMax: Int
  fbkEmail: String
  fbkFirstName: String
  fbkGender: String
  fbkLastName: String
  fbkUserId: String! @isUnique
  id: ID! @isUnique
  updatedAt: DateTime!
  fbkPhotoUri: String
  fbkFriends: Json
  fbkVerified: Boolean
  cellPhone: String
  type: UserType @defaultValue(value: SHOPPER)
  distributorx: Distributor @relation(name: "DistributorOnUser")
}

type Color implements Node {
  createdAt: DateTime!
  id: ID! @isUnique
  name: String!
  updatedAt: DateTime!
  finish: ColorFinish!
  rgb: String
  tone: ColorTone!
  family: ColorFamily!
  alias: String
  inventoriesx: [Inventory!]! @relation(name: "ColorOnInventory")
  status: ColorStatus!
}

enum UserType {
  SHOPPER
  DIST
}

enum ColorFinish {
  MATTE
  SHIMMER
  FROST
}

enum ColorTone {
  COOL
  WARM
  NEUTRAL
}

enum ColorFamily {
  NEUTRALS
  REDS
  PINKS
  BOLDPINKS
  BROWNS
  PURPLES
  BERRIES
  ORANGES
}

enum ColorStatus {
  CURRENT
  DISCONTINUED
  LIMITEDEDITION
}

type Distributor implements Node {
  bizName: String
  bizUri: String! @defaultValue(value: "https://")
  createdAt: DateTime!
  distId: String!
  id: ID! @isUnique
  inventoriesx: [Inventory!]! @relation(name: "DistributorOnInventory")
  logoUri: String! @defaultValue(value: "https://")
  updatedAt: DateTime!
  userx: User! @relation(name: "DistributorOnUser")
}

type Inventory implements Node {
  colorx: Color! @relation(name: "ColorOnInventory")
  count: Int! @defaultValue(value: 0)
  createdAt: DateTime!
  distributorx: Distributor @relation(name: "DistributorOnInventory")
  id: ID! @isUnique
  updatedAt: DateTime!
}